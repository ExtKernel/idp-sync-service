package com.iliauni.idpsyncservice.idp;

import com.iliauni.idpsyncservice.model.Client;
import com.iliauni.idpsyncservice.model.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * An abstract class implementing {@link UserIdpSyncHandler} for synchronizing users
 * in an Identity Provider (IDP) context.
 * The class itself is abstract, because it can't operate without a specific client type
 * due to the issue of autowiring generic classes.
 * A client type is supposed to be specified concretely while inheriting!!!
 * Do not use a <T extend SomeClass> or any other generic format,
 * while inheriting as a non-abstract class. There's just no point in doing that.
 *
 * @param <T> an IDP client type. Defines synchronization specifics.
 */
public abstract class GenericUserIdpSyncHandler<T extends Client> implements UserIdpSyncHandler<T> {
    private final IdpUserManager<T> userManager;

    protected GenericUserIdpSyncHandler(IdpUserManager<T> userManager) {
        this.userManager = userManager;
    }

    @Override
    public void sync(
            T client,
            Map<String, List<Optional<User>>> differenceMap
    ) {
        buildSyncFlagsMap()
                .entrySet()
                .stream()
                // filter out "altered" as a user can't have such state
                .filter(entry -> !entry.getKey().equals("altered"))
                .forEach(entry -> {
                    String entryKey = entry.getKey();
                    Boolean isUserNew = entry.getValue()[0];

                    forceUserChangesOnIdp(
                            client,
                            differenceMap.getOrDefault(entryKey, new ArrayList<>()),
                            isUserNew
                    );
                });
    }

    /**
     * Forces(makes) the changes on the IDP client using UserService.
     *
     * @param users a list of users, which are, basically, the change to be made.
     * @param isNew if true, users will be created.
     *             If false, users will be deleted.
     */
    private void forceUserChangesOnIdp(
            T client,
            List<Optional<User>> users,
            boolean isNew
    ) {
        users.forEach(user -> {
            user.ifPresent(u -> {
                if (isNew) {
                    userManager.createUser(client, u, true);
                } else {
                    userManager.deleteUser(client, u.getUsername(), true);
                }
            });
        });
    }

    /**
     * Builds a map containing boolean representations of flags,
     * which are supposed to be passed to synchronization methods.
     * Such as: "new", "altered", "missing", etc.
     * The keys are meant to match the keys of difference map, generated by DifferenceCalculator.
     * This exists for the sake of reducing boilerplate and adding some scalability.
     *
     * @return a map of boolean representations of DifferenceCalculator map's flags
     */
    private Map<String, Boolean[]> buildSyncFlagsMap() {
        return Map.of(
                "new", new Boolean[]{true, false},
                "altered", new Boolean[]{false, true},
                "missing", new Boolean[]{false, false}
        );
    }
}
